--[[ 
  Full Fixed Script:
  - NoClip (kh√¥ng t·ª± t·∫Øt, toggle b·∫±ng N ho·∫∑c n√∫t)
  - Hop Server (∆∞u ti√™n server tr·ªëng, duy·ªát nhi·ªÅu trang, kh√≥a n√∫t)
  - Throttle ensure CanCollide off ƒë·ªÉ ·ªïn ƒë·ªãnh
  Note: Kh√¥ng override v·ªã tr√≠ (an to√†n h∆°n). 
  Paste v√†o executor v√† ch·∫°y.
]]

if not game:IsLoaded() then game.Loaded:Wait() end

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")

local player = Players.LocalPlayer
if not player then return end

-- ===== CONFIG =====
local UPDATE_THROTTLE = 0.18       -- gi√¢y: throttle khi ƒë·∫£m b·∫£o CanCollide=false
local MAX_SERVER_PAGES = 8         -- s·ªë trang servers ƒë·ªÉ duy·ªát (m·ªói trang limit=100)
local SERVER_PAGE_LIMIT = 100
-- ==================

-- State
local noclip = false
local changedParts = {}            -- l∆∞u c√°c part ƒë√£ ƒë·ªïi ƒë·ªÉ restore
local descendantConn = nil
local throttleAccum = 0
local hrp = nil
local humanoid = nil

-- GUI (g·ªçn nh·∫π, ƒë·∫∑t trong PlayerGui ƒë·ªÉ t∆∞∆°ng th√≠ch executor)
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "FixedExecutorUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")

local frame = Instance.new("Frame", screenGui)
frame.Size = UDim2.new(0, 320, 0, 170)
frame.Position = UDim2.new(0.03, 0, 0.14, 0)
frame.BackgroundColor3 = Color3.fromRGB(24,24,28)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true
Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 12)

local title = Instance.new("TextLabel", frame)
title.Position = UDim2.new(0, 12, 0, 8)
title.Size = UDim2.new(1, -24, 0, 28)
title.BackgroundTransparency = 1
title.Text = "‚ö° Fixed NoClip + Hop"
title.Font = Enum.Font.GothamBold
title.TextSize = 16
title.TextColor3 = Color3.fromRGB(240,240,240)
title.TextXAlignment = Enum.TextXAlignment.Left

local statusLabel = Instance.new("TextLabel", frame)
statusLabel.Position = UDim2.new(0, 12, 0, 36)
statusLabel.Size = UDim2.new(1, -24, 0, 20)
statusLabel.BackgroundTransparency = 1
statusLabel.Text = "NoClip: ‚ùå OFF"
statusLabel.Font = Enum.Font.Gotham
statusLabel.TextSize = 14
statusLabel.TextColor3 = Color3.fromRGB(255,120,120)
statusLabel.TextXAlignment = Enum.TextXAlignment.Left

local infoLabel = Instance.new("TextLabel", frame)
infoLabel.Position = UDim2.new(0,12,0,56)
infoLabel.Size = UDim2.new(1, -24, 0, 18)
infoLabel.BackgroundTransparency = 1
infoLabel.Text = "Throttle: "..tostring(UPDATE_THROTTLE).."s | Server pages: "..tostring(MAX_SERVER_PAGES)
infoLabel.Font = Enum.Font.Gotham
infoLabel.TextSize = 12
infoLabel.TextColor3 = Color3.fromRGB(170,170,170)
infoLabel.TextXAlignment = Enum.TextXAlignment.Left

local toggleBtn = Instance.new("TextButton", frame)
toggleBtn.Position = UDim2.new(0.05,0,0,86)
toggleBtn.Size = UDim2.new(0.9,0,0,36)
toggleBtn.Text = "üîÅ Toggle NoClip (N)"
toggleBtn.Font = Enum.Font.GothamBold
toggleBtn.TextSize = 14
toggleBtn.BackgroundColor3 = Color3.fromRGB(60,130,255)
toggleBtn.TextColor3 = Color3.fromRGB(255,255,255)
toggleBtn.BorderSizePixel = 0
Instance.new("UICorner", toggleBtn).CornerRadius = UDim.new(0,8)

local hopBtn = Instance.new("TextButton", frame)
hopBtn.Position = UDim2.new(0.05,0,0,128)
hopBtn.Size = UDim2.new(0.9,0,0,34)
hopBtn.Text = "üåç Hop Server (Find Empty)"
hopBtn.Font = Enum.Font.GothamBold
hopBtn.TextSize = 14
hopBtn.BackgroundColor3 = Color3.fromRGB(40,200,120)
hopBtn.TextColor3 = Color3.fromRGB(255,255,255)
hopBtn.BorderSizePixel = 0
Instance.new("UICorner", hopBtn).CornerRadius = UDim.new(0,8)

-- Helper: update refs
local function updateRefs()
    local char = player.Character
    if not char then return end
    hrp = char:FindFirstChild("HumanoidRootPart")
    humanoid = char:FindFirstChildOfClass("Humanoid")
end
player.CharacterAdded:Connect(function()
    task.wait(0.12)
    updateRefs()
    -- n·∫øu respawn trong khi noclip on, ta kh√¥ng t·ª± t·∫Øt (theo y√™u c·∫ßu) nh∆∞ng restore changedParts
    -- ƒë·ªÉ an to√†n, reset changedParts (new character)
    changedParts = {}
    if descendantConn then
        pcall(function() descendantConn:Disconnect() end)
        descendantConn = nil
    end
end)
updateRefs()

-- Enable noclip once: disable CanCollide and remember parts
local function enableNoClipOnce()
    updateRefs()
    local char = player.Character
    if not char then return end

    -- clear list and populate
    changedParts = {}
    for _, v in ipairs(char:GetDescendants()) do
        if v:IsA("BasePart") then
            if v.CanCollide then
                table.insert(changedParts, v)
                pcall(function() v.CanCollide = false end)
            end
        end
    end

    -- listen to new parts and disable their collisions (store them)
    if descendantConn then
        pcall(function() descendantConn:Disconnect() end)
        descendantConn = nil
    end
    descendantConn = char.DescendantAdded:Connect(function(newDesc)
        if not noclip then return end
        if newDesc and newDesc:IsA("BasePart") then
            if newDesc.CanCollide then
                table.insert(changedParts, newDesc)
                pcall(function() newDesc.CanCollide = false end)
            end
        end
    end)

    -- optional: lightly try to set humanoid physics once (commented default off)
    -- pcall(function() if humanoid then humanoid:ChangeState(Enum.HumanoidStateType.Physics) end end)
end

-- Disable noclip: restore saved parts only
local function disableNoClipRestore()
    for _, p in ipairs(changedParts) do
        pcall(function()
            if p and p.Parent then p.CanCollide = true end
        end)
    end
    changedParts = {}
    if descendantConn then
        pcall(function() descendantConn:Disconnect() end)
        descendantConn = nil
    end
end

-- Public toggle (no auto-disable)
local function setNoClip(state)
    if state == noclip then return end
    noclip = state
    if noclip then
        statusLabel.Text = "NoClip: ‚úÖ ON"
        statusLabel.TextColor3 = Color3.fromRGB(120,240,120)
        pcall(enableNoClipOnce)
    else
        statusLabel.Text = "NoClip: ‚ùå OFF"
        statusLabel.TextColor3 = Color3.fromRGB(255,120,120)
        pcall(disableNoClipRestore)
    end
end

-- UI + key bind
toggleBtn.MouseButton1Click:Connect(function() setNoClip(not noclip) end)
UIS.InputBegan:Connect(function(inp, gpe)
    if gpe then return end
    if inp.KeyCode == Enum.KeyCode.N then
        setNoClip(not noclip)
    end
end)

-- Throttle loop: ƒë·∫£m b·∫£o nh·ªØng part b·ªã b·∫≠t l·∫°i v√¨ game ƒë·∫∑c bi·ªát s·∫Ω ƒë∆∞·ª£c set false l·∫°i nh∆∞ng throttled
RunService.Heartbeat:Connect(function(dt)
    if not noclip then return end
    throttleAccum = throttleAccum + dt
    if throttleAccum < UPDATE_THROTTLE then return end
    throttleAccum = 0

    local char = player.Character
    if not char then return end
    for _, v in ipairs(char:GetDescendants()) do
        if v:IsA("BasePart") then
            if v.CanCollide then
                -- ch·ªâ set l·∫°i khi th·∫≠t s·ª± c·∫ßn, pcall ƒë·ªÉ an to√†n
                pcall(function() v.CanCollide = false end)
                table.insert(changedParts, v)
            end
        end
    end
end)

-- Hop Server (fix l·ªói + multiple pages + lock button)
local isHopping = false
local function findBestServerAndHop()
    if isHopping then return end
    isHopping = true
    hopBtn.Text = "‚è≥ Searching..."
    hopBtn.Active = false
    hopBtn.AutoButtonColor = false
    hopBtn.BackgroundColor3 = Color3.fromRGB(140,140,140)

    task.spawn(function()
        local placeId = game.PlaceId
        local cursor = nil
        local bestId = nil
        local bestPlayers = math.huge

        for page=1, MAX_SERVER_PAGES do
            local url = "https://games.roblox.com/v1/games/"..tostring(placeId).."/servers/Public?limit="..SERVER_PAGE_LIMIT
            if cursor then
                url = url .. "&cursor=" .. tostring(cursor)
            end

            local ok, res = pcall(function() 
                -- small pcall to handle errors
                return HttpService:JSONDecode(game:HttpGet(url))
            end)

            if not ok or not res or not res.data then
                break
            end

            for _, s in ipairs(res.data) do
                if s.id and s.id ~= game.JobId then
                    -- ∆∞u ti√™n server tr·ªëng
                    if s.playing == 0 then
                        bestId = s.id
                        bestPlayers = 0
                        break
                    end
                    -- n·∫øu kh√¥ng c√≥ 0 th√¨ ch·ªçn nh·ªè nh·∫•t
                    if type(s.playing) == "number" and s.playing < bestPlayers then
                        bestPlayers = s.playing
                        bestId = s.id
                    end
                end
            end

            if bestPlayers == 0 then break end
            cursor = res.nextPageCursor
            if not cursor then break end
            task.wait(0.08) -- nh·∫π nh√†ng ch·ªù ƒë·ªÉ tr√°nh rate-limit
        end

        if bestId then
            pcall(function()
                TeleportService:TeleportToPlaceInstance(placeId, bestId, player)
            end)
            -- khi teleport th√†nh c√¥ng th√¨ game chuy·ªÉn server, script s·∫Ω unload
            return
        else
            -- reset UI n·∫øu kh√¥ng t√¨m th·∫•y
            hopBtn.Text = "üåç Hop Server (Find Empty)"
            hopBtn.Active = true
            hopBtn.AutoButtonColor = true
            hopBtn.BackgroundColor3 = Color3.fromRGB(40,200,120)
            isHopping = false
        end
    end)
end

hopBtn.MouseButton1Click:Connect(findBestServerAndHop)

-- Safety: restore on script unload or player leave
local function cleanup()
    pcall(disableNoClipRestore)
    if descendantConn then pcall(function() descendantConn:Disconnect() end) end
    pcall(function() screenGui:Destroy() end)
end

game:BindToClose(function()
    cleanup()
end)

player.Idled:Connect(function() 
    -- nothing forced; do not auto-disable to respect user request
end)

print("Fixed NoClip + Hop loaded. Toggle with N or button. Hop button searches empty/low servers.")
